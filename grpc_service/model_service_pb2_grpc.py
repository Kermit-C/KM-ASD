# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import model_service_pb2 as model__service__pb2


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.call_face_detection = channel.unary_unary(
            "/ModelService/call_face_detection",
            request_serializer=model__service__pb2.FaceDetectionRequest.SerializeToString,
            response_deserializer=model__service__pb2.FaceDetectionResponse.FromString,
        )
        self.call_face_recognition = channel.unary_unary(
            "/ModelService/call_face_recognition",
            request_serializer=model__service__pb2.FaceRecognitionRequest.SerializeToString,
            response_deserializer=model__service__pb2.FaceRecognitionResponse.FromString,
        )
        self.call_speaker_verification = channel.unary_unary(
            "/ModelService/call_speaker_verification",
            request_serializer=model__service__pb2.SpeakerVerificationRequest.SerializeToString,
            response_deserializer=model__service__pb2.SpeakerVerificationResponse.FromString,
        )


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def call_face_detection(self, request, context):
        """人脸检测"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def call_face_recognition(self, request, context):
        """人脸识别"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def call_speaker_verification(self, request, context):
        """说话人验证"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "call_face_detection": grpc.unary_unary_rpc_method_handler(
            servicer.call_face_detection,
            request_deserializer=model__service__pb2.FaceDetectionRequest.FromString,
            response_serializer=model__service__pb2.FaceDetectionResponse.SerializeToString,
        ),
        "call_face_recognition": grpc.unary_unary_rpc_method_handler(
            servicer.call_face_recognition,
            request_deserializer=model__service__pb2.FaceRecognitionRequest.FromString,
            response_serializer=model__service__pb2.FaceRecognitionResponse.SerializeToString,
        ),
        "call_speaker_verification": grpc.unary_unary_rpc_method_handler(
            servicer.call_speaker_verification,
            request_deserializer=model__service__pb2.SpeakerVerificationRequest.FromString,
            response_serializer=model__service__pb2.SpeakerVerificationResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ModelService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def call_face_detection(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ModelService/call_face_detection",
            model__service__pb2.FaceDetectionRequest.SerializeToString,
            model__service__pb2.FaceDetectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def call_face_recognition(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ModelService/call_face_recognition",
            model__service__pb2.FaceRecognitionRequest.SerializeToString,
            model__service__pb2.FaceRecognitionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def call_speaker_verification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ModelService/call_speaker_verification",
            model__service__pb2.SpeakerVerificationRequest.SerializeToString,
            model__service__pb2.SpeakerVerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
